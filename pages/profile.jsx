import Head from "next/head";
import styles from "../styles/profile.module.css";
import { useEffect, useState, useCallback } from "react";
import { db } from "../components/firebase";
import { getAuth, onAuthStateChanged } from "firebase/auth";
import { collection, doc, getDoc, setDoc } from "firebase/firestore";

import { Footer } from "../components/Footer";
import { HeaderBottom } from "../components/HeaderBottom";
import { Header } from "../components/Header";

export default function profile() {
  const [Value, setValue] = useState("");
  const [ValueErrors, setValueErrors] = useState("");
  const [Name, setName] = useState("");
  const handleChange = (e) => {
    setValue(e.target.value);
  };

  //マウント時に誰がログインしているか確認する。クッキーを見てる（多分）
  useEffect(() => {
    //asyncのためにfetchDataを定義
    const StateProfile = async () => {
      //これで誰がログインしているか分かる
      const auth = getAuth();
      onAuthStateChanged(auth, async (user) => {
        //ユーザがいれば
        const uid = user.uid;
        const docRef = doc(db, "users", uid);
        const docSnap = await getDoc(docRef);
        //debugログ
        console.log(docSnap.data().AmatenPay);
        setName(docSnap.data().name);
      });
    };
    StateProfile();
  }, []);

  const handleClick = useCallback(async () => {
    //バリデーションチェック
    console.log("バリデーションチェックをしました");
    //const errorsが無いと終わる、setValueErrorsだけでは、値の入るタイミングが遅く条件分岐時点では、常に "" になってしまう
    const errors = await validate(Value);

    //setValueErrors() の戻り値を useState() で状態管理する
    setValueErrors(errors);
    //エラーが無ければ、ドキュメントにデータをアップデートする
    if (errors.length == 0) {
      const changeProfile = async () => {
        const auth = getAuth();
        onAuthStateChanged(auth, async (user) => {
          const uid = user.uid;

          const citiesRef = collection(db, "users");
          await setDoc(
            doc(citiesRef, uid),
            {
              name: Value,
            },
            //trueで変更データ以外は、そのままに。
            { merge: true }
          );
          console.log("保存されました");
          window.location.reload();
        });
      };
      changeProfile();
    }
    console.log("条件分岐");
  }, [Value]);

  const validate = (value) => {
    let errors = "";

    if (!value) {
      errors = "ユーザ名を入力して下さい";
    } else if (value.length < 4 || value.length > 10) {
      errors = "4文字以上 10文字以下で入力してください";
    }

    return errors;
  };

  return (
    <div className={styles.container}>
      <Head>
        <meta charSet="UTF-8" />
        <title>Amaten|プロフィール</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/Ten.ico" />
      </Head>
      <Header />
      <HeaderBottom />
      <div className={styles.content}>
        <div className={styles.card}>
          <p className={styles.title}>プロフィール</p>
          <p>ディスプレイネーム</p>
          <p>{Name}</p>
          <input
            type="text"
            placeholder="ここに記入してください"
            name="displayname"
            onChange={(e) => handleChange(e)}
          />

          <p className={styles.error}>{ValueErrors}</p>
          <button className={styles.btn} onClick={(e) => handleClick(e)}>
            保存
          </button>
        </div>
      </div>

      <Footer />
    </div>
  );
}
