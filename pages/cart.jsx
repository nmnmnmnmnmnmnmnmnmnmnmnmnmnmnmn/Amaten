//リアルタイムｄｂ後　再レンダリング前

import styles from "../styles/cart.module.css"; //後々変更

import Head from "next/head";
import Link from "next/link";
import { useEffect, useState } from "react";
import { db } from "../components/firebase";
import { getAuth, onAuthStateChanged } from "firebase/auth";
import {
  collection,
  doc,
  getDoc,
  onSnapshot,
  deleteDoc,
  query,
} from "firebase/firestore";

import { Header } from "@/components/Header";
import { HeaderBottom } from "../components/HeaderBottom";
import { Footer } from "@/components/Footer";

export default function cartPage() {
  const [history, setHistory] = useState([]);

  //マウント時に誰がログインしているか確認する。firebaseAuth
  useEffect(() => {
    //asyncのために関数を定義
    const StateProfile = async () => {
      //これで誰がログインしているか分かる
      const auth = getAuth();
      onAuthStateChanged(auth, async (user) => {
        //ユーザがいれば
        if (!user) {
          window.location.href = "/login";

          return;
        }
        const uid = user.uid;
        //ユーザー名取得
        const docRef = doc(db, "users", uid);
        const docSnap = await getDoc(docRef);
        console.log(docSnap);

        //購入履歴を取得 リアルタイムで取得したい
        const q = query(collection(db, "users", uid, "carts"));
        const unsubscribe = onSnapshot(q, (querySnapshot) => {
          const carts = [];
          querySnapshot.forEach((doc) => {
            console.log(doc);
            carts.push(doc);
            console.log("読み込みました");
          });

          setHistory(carts);
          console.log(carts);
          console.log("配列に入れ直しました");
          console.log("useState history の中身");
          console.log(history);
        });
      });
    };
    StateProfile();
  }, []);

  const handleDelCart = async (his) => {
    console.log(his);
    console.log(his.ref.id);
    //ボタンが押されるとそのdbを消したい
    const auth = getAuth();
    onAuthStateChanged(auth, async (user) => {
      //ユーザがいれば
      if (!user) {
        return;
      }
      const uid = user.uid;
      const res = await doc(db, "users", uid, "carts", his.ref.id);
      console.log(res);
      await deleteDoc(res);
    });
  };

  //チェックアウト機能は/apiの下でやってる　この関数は今　無理やりこのページに来た馬鹿をログインページに飛ばすだけ
  const cartsCheckout = () => {
    const auth = getAuth();
    onAuthStateChanged(auth, async (user) => {
      //ユーザがいれば
      if (!user) {
        window.location.href = "/login";
      }
    });
  };

  return (
    <div className={styles.container}>
      <Head>
        <meta charset="UTF-8" />
        <title>Amaten|カート</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/Ten.ico" />
      </Head>
      <Header />
      <HeaderBottom />
      <div>cartPage</div>
      <div>
        {history
          .sort((a, b) => b.data().time - a.data().time)
          .map((his, i) => (
            <div key={i}>
              <div className={styles.historys}>
                <Link href={his.data().url} target="_blank">
                  <div className={styles.cap}>
                    <img src={his.data().img} alt="" />
                    {his.data().name}
                  </div>
                </Link>
                <div></div>
                <div>{his.data().price}円</div>
                <div>
                  追加時刻 :　
                  {new Intl.DateTimeFormat("ja-JP", {
                    year: "numeric",
                    month: "long",
                    day: "numeric",
                    hour: "2-digit",
                    minute: "2-digit",
                    second: "2-digit",
                  }).format(new Date(his.data().time))}
                  <div>
                    <button
                      onClick={() => {
                        handleDelCart(his);
                      }}
                    >
                      削除
                    </button>
                  </div>
                </div>
              </div>
            </div>
          ))}
      </div>
      <form action="/api/carts_sessions" method="POST">
        <input
          type="hidden"
          name="history"
          value={JSON.stringify(history.map((his) => his.data()))}
        />

        <section className={styles.section}>
          <button
            className={styles.button}
            onClick={() => {
              cartsCheckout();
            }}
          >
            Checkout
          </button>
        </section>
      </form>
      <Footer />
    </div>
  );
}
